1、gradle 配置指南
https://maven.aliyun.com/mvn/guide
在 build.gradle 文件中加入以下代码:

allprojects {
  repositories {
    maven {
      url 'https://maven.aliyun.com/repository/public/'
    }
    mavenLocal()
    mavenCentral()
  }
}

如果想使用其它代理仓，以使用spring仓为例，代码如下:

allProjects {
  repositories {
    maven {
      url 'https://maven.aliyun.com/repository/public/'
    }
    maven {
      url 'https://maven.aliyun.com/repository/spring/'
    }
    mavenLocal()
    mavenCentral()
  }
}

加入你要引用的文件信息：

dependencies {
  compile '[GROUP_ID]:[ARTIFACT_ID]:[VERSION]'
}

执行命令：

gradle dependencies 或 ./gradlew dependencies 安装依赖


2、使用支持库
https://developer.android.google.cn/topic/libraries/support-library/setup
对于要在其中使用支持库的每个模块，请在模块的 build.gradle 文件的 dependencies 块中添加相应库。例如，如需添加 v4 core-utils 库，请添加以下行：

    dependencies {
        ...
        
        
3、github 下载单个文件或目录方法
（1）chrome的插件gitzip
（2）
git clone -n <url>
cd gitname
git config core.sparsecheckout true
echo 需要下载的目录或文件在git中的相对路径 >> .git/info/sparse-checkout
git checkout master(或branch名)  
	(使用git pull origin master 会出现error: Sparse checkout leaves no entry on working directory）

        
        
4、Android studio 打包apk后发给别人，安装失败。“应用是非正式发布版本，当前设备不支持安装“
在自己手机上也无法安装，之后连接USB进行调试时可以运行，打包成APK安装就会显示
“应用是非正式发布版本，当前设备不支持安装“
造成该问题的原因是Android Studio 3.0会在debug apk的manifest文件application标签里自动添加 android:testOnly="true"属性。该属性导致在IDE中使用Run生成的apk在大部分手机上只能用adb install -t 来安装。
这种apk在某些手机上甚至安装不了。
解决方法：
在gradle.properties 文件中添加如下指令：

android.injected.testOnly=false

        
        
        
        
        
        
        
        
        
        implementation "com.android.support:support-core-utils:28.0.0"
    }
    
    
 5、git push -u origin master 出错
 Error: failed to push some refs to 'https://github.com/mengzesam/vibrokit.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
 正确步骤：
 1） git init //初始化仓库

2） git add .(文件name) //添加文件到本地仓库

3）git commit -m "first commit" //添加文件描述信息

4） git remote add origin + 远程仓库地址 //链接远程仓库，创建主分支

5）git pull origin master // 把本地仓库的变化连接到远程仓库主分支

6）git push -u origin master //把本地仓库的文件推送到远程仓库
 

